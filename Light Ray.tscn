[gd_scene load_steps=5 format=2]

[ext_resource path="res://RayCast2D.tscn" type="PackedScene" id=1]
[ext_resource path="res://Untitled.png" type="Texture" id=2]
[ext_resource path="res://drawing.svg" type="Texture" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

export(PackedScene) var raycast
export(int) var bounces = 1 #The amount of times the light bounces off of surfaces with reflective properties
onready var line = $\"Line2D\"
var next_bounce_vector : Vector2 = Vector2()

func _process(delta: float) -> void:
	line.points = PoolVector2Array()
	line.add_point(Vector2())
	
	var casting = true
	var x = 2
	line.add_point(ray_get(Vector2(), get_global_mouse_position()))
#	line.add_point(ray_get(Vector2(), Vector2(502, 402)))
	
	while casting:
		line.add_point(ray_get(line.points[x - 1], next_bounce_vector))
		if(x >= 2):
			casting = false
		x += 1
	print(to_global(line.points[2]))
		
func ray_get(var _position : Vector2, var target : Vector2) -> Vector2:
	var ray = raycast.instance()
	add_child(ray)
	ray.position = _position
	ray.look_at(target)
	
	ray.force_raycast_update()
	var collision = to_local(ray.get_collision_point())
	
	var n = ray.get_collision_normal()

	next_bounce_vector = position.normalized().bounce(n)
	ray.queue_free()
	return collision"

[node name="Light Ray" type="Node2D"]
script = SubResource( 1 )
raycast = ExtResource( 1 )

[node name="Line2D" type="Line2D" parent="."]
points = PoolVector2Array( 0, 0, 0, 0, 0, 0 )
default_color = Color( 1, 1, 1, 1 )
texture = ExtResource( 2 )
texture_mode = 2

[node name="Sprite" type="Sprite" parent="."]
visible = false
scale = Vector2( 0.15, 0.15 )
texture = ExtResource( 3 )

